
zip = (a, b) ->
  c = []
  for i from 0 til a.length
    c.push([a[i], b[i]])
  return c

MAX = 150
SCALE = 100
HINTSCALE = 25
UNIT_VEC_COLORS = <[ red blue green orange cyan ]>

# Mapping used to display 3D objects on canvas.
DISPLAY3D =
  * 1, 0, -0.2
  * 0, 1, -0.3
# Mapping used to display 1D objects on canvas.
DISPLAY1D = [[1], [0]]

INSTR3DHINT = get_unit_vec_instr UNIT_VEC_COLORS.slice 0, 3
INSTR3DHINT = instr_apply INSTR3DHINT, smmult(HINTSCALE, idmatrix 3)
INSTR2DHINT = get_unit_vec_instr UNIT_VEC_COLORS.slice 0, 2
INSTR2DHINT = instr_apply INSTR2DHINT, smmult(HINTSCALE, idmatrix 2)

# Initial values of matrix input fields
INITIALM43 =
  * 1, 0, 0, 0.4
  * 0, 1, 0, 0.3
  * 0, 0, 1, 0.3
INITIALM32 =
  * 1, 0, -0.4
  * 0, 1, -0.6
INITIALM21 = [[0.7 0.3]]


# current_obj elem <[ objbox, objell, objhexa ]>
current_obj = undefined
current_instr = undefined
phi = 0

window.onload = ->
  set_obj \objbox

  # Show matrix input fields
  document.getElementById 'matrix3D'
    .innerHTML = matin_html('matrix3Dtab', 3, 4, INITIALM43, 'x', '\\xi')
  document.getElementById 'matrix2D'
    .innerHTML = matin_html('matrix2Dtab', 2, 3, INITIALM32, 'y', 'x')
  document.getElementById 'matrix1D'
    .innerHTML = matin_html('matrix1Dtab', 1, 2, INITIALM21, '\\sigma', 'y')

  draw_axes!
  animate!

# Called when object radio buttons are pressed.
# Sets up obj parameter input and sets `current_obj`.
# Triggers redraw.
set_obj = (id) ->
  props = document.getElementById 'shapeprops'
  if id is 'objbox'
    text = 'side lengths:<br>\n'
    for p of <[ a b c d ]>
      text += '\\('+p+'=\\)<input id="prop'+p+'" type="number" class="numin" value="1"><br>\n'
    props.innerHTML = text
  else if id is 'objell'
    text = 'semi-principal axes:<br>\n'
    for p of <[ a b c d]>
      text += '\\('+p+'=\\)<input id="prop'+p+'" type="number" class="numin" value="1"><br>\n'
    props.innerHTML = text
  else
    props.innerHTML = ''
  MathJax.Hub.Queue(["Typeset",MathJax.Hub])

  current_obj := id
  instr = get_hypercube_instr [1]*4
  current_instr := instr.concat get_unit_vec_instr UNIT_VEC_COLORS[...4]

draw_axes = ->
  instr = current_instr
  m43 = matin_read 'matrix3Dtab' 3 4
  m32 = matin_read 'matrix2Dtab' 2 3
  m21 = matin_read 'matrix1Dtab' 1 2

  map4 = smmult SCALE, idmatrix 4
  map4 = mmmult rotation_matrix(4, 0,3, phi), map4
  map3 = mmmult m43, map4
  map2 = mmmult m32, map3
  map1 = mmmult m21, map2

  # rotate 3D diagram and add hint
  rot = rotation_matrix(3, 1,2, phi/2)
  map3hint = instr_apply INSTR3DHINT, mchain [DISPLAY3D, rot]
  map3hint = instr_translate map3hint, [-MAX+HINTSCALE+2, -MAX+HINTSCALE+2]
  map3cube = instr_apply instr, mchain [DISPLAY3D, rot, m43, map4]
  draw \canv3D, map3cube.concat map3hint

  # 2D, add hint
  map2hint = instr_apply INSTR2DHINT, DISPLAY3D
  map2hint = instr_translate map2hint, [-MAX+HINTSCALE+2, -MAX+HINTSCALE+2]
  map2cube = instr_apply instr, mchain [m32, m43, map4]
  draw \canv2D, map2cube.concat map2hint

  # 1D
  draw \canv1D, instr_apply(instr, mchain [DISPLAY1D, m21, m32, m43, map4])

  /* # 5 dimensional hypercube
  es = get_unit_vec_instr 5
  instr = get_hypercube_instr [1]*5
  instr = instr.concat(es)
  map =
    * 1, 0, -0.4, 0.4, 0
    * 0, 1, -0.6, 0.3, 0
  map = mmmult map, rotation_matrix(5, 3,4, phi)
  draw 'canv2D', instr, smmult(100, map)
   */

animate = ->
  rep = ->
    phi += 0.01
    draw_axes!
    return undefined
  setInterval rep, 40
